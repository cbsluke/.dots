#!/usr/bin/env bash
# Work in progress note management tool

set -e

: "${EXE:="${0##*/}"}"
: "${USER:="$(whoami)"}"
: "${GITUSER:="${USER}"}"
: "${GHREPOS:="${HOME}/Workspace/repos/github/${USER}"}"

declare -A CONFIG

initialize() {
  : "${CONFIG[editor]:=vi}"
  : "${CONFIG[mode]:=private}"
  : "${CONFIG[root_private]:="${HOME}/Private/${EXE}"}"
  : "${CONFIG[root_public]:="${GHREPOS}/${EXE}"}"
  : "${CONFIG[private]:="${HOME}/Private/${EXE}/src/zet"}"
  : "${CONFIG[public]:="${GHREPOS}/${EXE}/src/zet"}"
  config_write
}

# Utility
config_path() {
  local dir path
  dir="${HOME}/.config/${EXE}"
  path="${dir}/config"

  if [[ ! -r "${path}" ]]; then
    mkdir -p "${dir}" && touch "${path}"
  fi

  echo "${path}"
}

config_read() {
  local config_path
  config_path="$(config_path)"

  while IFS= read -r line; do
    if [[ "${line}" =~ ^([^=]+)=(.+)$ ]]; then
      CONFIG["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
    fi
  done < "${config_path}"
}

config_write() {
  local config_path
  config_path="$(config_path)"

  for key in "${!CONFIG[@]}"; do
    echo "${key}=${CONFIG[${key}]}"
  done | sort > "${config_path}"
}

isostamp() {
  date +%Y%m%d%H%M%S
}

timestamp() {
  printf "%(%A, %B %-e, %Y, %-l:%M:%S%p %Z%0z)T"
}

newest() {
  echo "$(head -n 1 < <(ls -It "${1:-.}"))/README.md"
}

urlencode() {
  local string="${1}"
  local strlen=${#string}
  local encoded=""
  local pos c o

  for ((pos = 0; pos < strlen; pos++)); do
    c=${string:$pos:1}
    case "$c" in
      [-_.~a-zA-Z0-9]) o="${c}" ;;
      *) printf -v o '%%%02x' "'$c'" ;;
    esac
    encoded+="${o}"
  done
  echo "${encoded}"
  REPLY="${encoded}"
}

zet_root_path() {
  [[ ${CONFIG[mode]} == 'public' ]] && echo "${CONFIG[root_public]}"
  [[ ${CONFIG[mode]} == 'private' ]] && echo "${CONFIG[root_private]}"
}

zet_path() {
  [[ ${CONFIG[mode]} == 'public' ]] && echo "${CONFIG[public]}"
  [[ ${CONFIG[mode]} == 'private' ]] && echo "${CONFIG[private]}"
}

zet_remote() {
  local repo remote url

  cd "$(zet_path)"
  remote="$(git config --get remote.origin.url)"

  case "${remote}" in
    http*) url="${remote}" ;;
    git*)
      repo="${remote#*/}"
      repo="${repo%*.git}"
      url="https://github.com/${GITUSER}/${repo}"
      ;;
  esac

  echo "${url}"
}

zet_url() {
  local id path url repo remote
  path="$1"
  id="$(zet_id "${path}")"
  url="$(zet_remote)/${id}"

  echo "${url}"
}

# TODO: error handling everywhere
zet_id() {
  local id path
  path="$1"
  id="$(basename "$(dirname "${match}")")"
  echo "${id}"
}

zet_title() {
  local title path
  path="$1"
  IFS= read -r title < "${path}"
  title="${title#*# }"
  echo "${title}"
}

zet_commit() {
  local title dir path timestamp
  path="$1"
  title="$(zet_title "${path}")"
  dir="${path%%/README.md}"
  timestamp="$(timestamp)"

  cd "$(zet_path)"
  if [[ $(git status --porcelain) ]]; then
    sed -i "" "s/Last updated on .*/Last updated on ${timestamp}/" "${path}"
    read -rp 'Commit? ' res
    if [[ "${res}" =~ ^[Yy] ]]; then
      git pull -q
      git add "${dir}"
      git commit -m "${title}"
      exec git push -u origin main
    fi
  fi
  exit 0
}

# Commands
command_create() {
  local id dir path editor title
  id="$(isostamp)"
  dir="$(zet_path)/${id}"
  path="${dir}/README.md"
  editor="${CONFIG[editor]}"
  title="$1"

  mkdir -p "${dir}" && touch "${path}"
  echo "# ${title}" > "${path}"
  printf "\n#### Timestamps\n" >> "${path}"
  printf "\nCreated on %(%A, %B %-e, %Y, %-l:%M:%S%p %Z%0z)T\n" >> "${path}"
  printf "\nLast updated on %(%A, %B %-e, %Y, %-l:%M:%S%p %Z%0z)T\n" >> "${path}"
  "${editor}" "${path}"
  zet_commit "${path}"
}

command_edit() {
  local match matches editor path
  editor="${CONFIG[editor]}"

  readarray -t matches < <(grep --exclude-dir=.git -ir -m1 "^# $*" "$(zet_path)" | sort -r)

  if [[ "$*" == "last" ]]; then
    path="$(zet_path)/$(newest "$(zet_path)")"
    "${editor}" "${path}"
    zet_commit "${path}"
  fi

  if [[ ${#matches[@]} -eq 1 ]]; then
    path="${matches[0]%%:*}"
    "${editor}" "${path}"
    zet_commit "${path}"
  fi

  select match in "${matches[@]##*:# }"; do
    path=$(grep --exclude-dir=.git -irl "^# ${match}$" "$(zet_path)")
    "${editor}" "${path}"
    zet_commit "${path}"
  done
}

command_query() {
  query="$1"
  echo "$(zet_remote)/search?q=$(urlencode "${query}")"
}

command_open() {
  if [[ ! $(command -v mdbook) ]]; then
    echo "'mdbook' is not installed."
    exit 0
  fi

  cd "$(zet_root_path)"
  ./build
  mdbook serve -p 10000 --open
}

command_mode() {
  echo "zet: ${CONFIG[mode]}"
}

command_public() {
  echo 'mode: public'
  CONFIG[mode]=public
  config_write
}

command_private() {
  echo 'mode: private'
  CONFIG[mode]=private
  config_write
}

command_config() {
  exec cat "$(config_path)"
}

main() {
  config_read
  initialize

  case "$1" in
    create) shift; command_create "$*"; exit 0 ;;
    edit) shift; command_edit "$*"; exit 0 ;;
    query) shift; command_query "$*"; exit 0 ;;
    open) command_open; exit 0 ;;
    mode) command_mode; exit 0 ;;
    public) command_public; exit 0 ;;
    private) command_private; exit 0 ;;
    conf*) command_config; exit 0 ;;
    *)
  esac
}

main "$@"

